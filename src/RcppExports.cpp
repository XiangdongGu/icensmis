// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// dmat
NumericMatrix dmat(NumericVector id, NumericVector time, IntegerVector result, double phi1, double phi0, double negpred);
RcppExport SEXP icensmis_dmat(SEXP idSEXP, SEXP timeSEXP, SEXP resultSEXP, SEXP phi1SEXP, SEXP phi0SEXP, SEXP negpredSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type id(idSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type result(resultSEXP );
        Rcpp::traits::input_parameter< double >::type phi1(phi1SEXP );
        Rcpp::traits::input_parameter< double >::type phi0(phi0SEXP );
        Rcpp::traits::input_parameter< double >::type negpred(negpredSEXP );
        NumericMatrix __result = dmat(id, time, result, phi1, phi0, negpred);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// getrids
IntegerVector getrids(NumericVector id, int nsub);
RcppExport SEXP icensmis_getrids(SEXP idSEXP, SEXP nsubSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type id(idSEXP );
        Rcpp::traits::input_parameter< int >::type nsub(nsubSEXP );
        IntegerVector __result = getrids(id, nsub);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// timeMat
NumericMatrix timeMat(int nsub, int J, NumericVector time, NumericVector utime, NumericMatrix Xmat);
RcppExport SEXP icensmis_timeMat(SEXP nsubSEXP, SEXP JSEXP, SEXP timeSEXP, SEXP utimeSEXP, SEXP XmatSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type nsub(nsubSEXP );
        Rcpp::traits::input_parameter< int >::type J(JSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type utime(utimeSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Xmat(XmatSEXP );
        NumericMatrix __result = timeMat(nsub, J, time, utime, Xmat);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// loglik_lamb
double loglik_lamb(NumericVector par, NumericMatrix Dm, NumericVector eta);
RcppExport SEXP icensmis_loglik_lamb(SEXP parSEXP, SEXP DmSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type par(parSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type eta(etaSEXP );
        double __result = loglik_lamb(par, Dm, eta);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// gradlik_lamb
NumericVector gradlik_lamb(NumericVector par, NumericMatrix Dm, NumericVector eta);
RcppExport SEXP icensmis_gradlik_lamb(SEXP parSEXP, SEXP DmSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type par(parSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type eta(etaSEXP );
        NumericVector __result = gradlik_lamb(par, Dm, eta);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// loglik_pw
double loglik_pw(NumericVector par, NumericMatrix Dm, NumericVector eta, IntegerVector breaks);
RcppExport SEXP icensmis_loglik_pw(SEXP parSEXP, SEXP DmSEXP, SEXP etaSEXP, SEXP breaksSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type par(parSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type eta(etaSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type breaks(breaksSEXP );
        double __result = loglik_pw(par, Dm, eta, breaks);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// gradlik_pw
NumericVector gradlik_pw(NumericVector par, NumericMatrix Dm, NumericVector eta, IntegerVector breaks);
RcppExport SEXP icensmis_gradlik_pw(SEXP parSEXP, SEXP DmSEXP, SEXP etaSEXP, SEXP breaksSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type par(parSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type eta(etaSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type breaks(breaksSEXP );
        NumericVector __result = gradlik_pw(par, Dm, eta, breaks);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// maxlambda
double maxlambda(NumericMatrix Dm, NumericMatrix Xmat, NumericVector parm, Function fitsurv);
RcppExport SEXP icensmis_maxlambda(SEXP DmSEXP, SEXP XmatSEXP, SEXP parmSEXP, SEXP fitsurvSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Xmat(XmatSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type parm(parmSEXP );
        Rcpp::traits::input_parameter< Function >::type fitsurv(fitsurvSEXP );
        double __result = maxlambda(Dm, Xmat, parm, fitsurv);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// iclasso
NumericVector iclasso(NumericMatrix Dm, NumericMatrix Xmat, NumericVector parmi, double lambda, Function fitsurv, double tol);
RcppExport SEXP icensmis_iclasso(SEXP DmSEXP, SEXP XmatSEXP, SEXP parmiSEXP, SEXP lambdaSEXP, SEXP fitsurvSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Xmat(XmatSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type parmi(parmiSEXP );
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< Function >::type fitsurv(fitsurvSEXP );
        Rcpp::traits::input_parameter< double >::type tol(tolSEXP );
        NumericVector __result = iclasso(Dm, Xmat, parmi, lambda, fitsurv, tol);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// maxlambda_pw
double maxlambda_pw(NumericMatrix Dm, NumericMatrix Xmat, NumericVector parm, IntegerVector breaks, Function fitsurv_pw);
RcppExport SEXP icensmis_maxlambda_pw(SEXP DmSEXP, SEXP XmatSEXP, SEXP parmSEXP, SEXP breaksSEXP, SEXP fitsurv_pwSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Xmat(XmatSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type parm(parmSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type breaks(breaksSEXP );
        Rcpp::traits::input_parameter< Function >::type fitsurv_pw(fitsurv_pwSEXP );
        double __result = maxlambda_pw(Dm, Xmat, parm, breaks, fitsurv_pw);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// iclasso_pw
NumericVector iclasso_pw(NumericMatrix Dm, NumericMatrix Xmat, NumericVector parmi, IntegerVector breaks, double lambda, Function fitsurv_pw, double tol);
RcppExport SEXP icensmis_iclasso_pw(SEXP DmSEXP, SEXP XmatSEXP, SEXP parmiSEXP, SEXP breaksSEXP, SEXP lambdaSEXP, SEXP fitsurv_pwSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Xmat(XmatSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type parmi(parmiSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type breaks(breaksSEXP );
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< Function >::type fitsurv_pw(fitsurv_pwSEXP );
        Rcpp::traits::input_parameter< double >::type tol(tolSEXP );
        NumericVector __result = iclasso_pw(Dm, Xmat, parmi, breaks, lambda, fitsurv_pw, tol);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// bayesmc
IntegerVector bayesmc(NumericMatrix Dm, NumericMatrix Xmat, double b, double om1, double om2, int niter, double psample, double initsurv, int nreport, Function fitsurv);
RcppExport SEXP icensmis_bayesmc(SEXP DmSEXP, SEXP XmatSEXP, SEXP bSEXP, SEXP om1SEXP, SEXP om2SEXP, SEXP niterSEXP, SEXP psampleSEXP, SEXP initsurvSEXP, SEXP nreportSEXP, SEXP fitsurvSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Xmat(XmatSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        Rcpp::traits::input_parameter< double >::type om1(om1SEXP );
        Rcpp::traits::input_parameter< double >::type om2(om2SEXP );
        Rcpp::traits::input_parameter< int >::type niter(niterSEXP );
        Rcpp::traits::input_parameter< double >::type psample(psampleSEXP );
        Rcpp::traits::input_parameter< double >::type initsurv(initsurvSEXP );
        Rcpp::traits::input_parameter< int >::type nreport(nreportSEXP );
        Rcpp::traits::input_parameter< Function >::type fitsurv(fitsurvSEXP );
        IntegerVector __result = bayesmc(Dm, Xmat, b, om1, om2, niter, psample, initsurv, nreport, fitsurv);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// bayesmc_pw
IntegerVector bayesmc_pw(NumericMatrix Dm, NumericMatrix Xmat, IntegerVector breaks, double b, double om1, double om2, int niter, double psample, double initsurv, int nreport, Function fitsurv_pw);
RcppExport SEXP icensmis_bayesmc_pw(SEXP DmSEXP, SEXP XmatSEXP, SEXP breaksSEXP, SEXP bSEXP, SEXP om1SEXP, SEXP om2SEXP, SEXP niterSEXP, SEXP psampleSEXP, SEXP initsurvSEXP, SEXP nreportSEXP, SEXP fitsurv_pwSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Xmat(XmatSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type breaks(breaksSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        Rcpp::traits::input_parameter< double >::type om1(om1SEXP );
        Rcpp::traits::input_parameter< double >::type om2(om2SEXP );
        Rcpp::traits::input_parameter< int >::type niter(niterSEXP );
        Rcpp::traits::input_parameter< double >::type psample(psampleSEXP );
        Rcpp::traits::input_parameter< double >::type initsurv(initsurvSEXP );
        Rcpp::traits::input_parameter< int >::type nreport(nreportSEXP );
        Rcpp::traits::input_parameter< Function >::type fitsurv_pw(fitsurv_pwSEXP );
        IntegerVector __result = bayesmc_pw(Dm, Xmat, breaks, b, om1, om2, niter, psample, initsurv, nreport, fitsurv_pw);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// gamma_mean
NumericVector gamma_mean(IntegerVector outgamma, int start);
RcppExport SEXP icensmis_gamma_mean(SEXP outgammaSEXP, SEXP startSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerVector >::type outgamma(outgammaSEXP );
        Rcpp::traits::input_parameter< int >::type start(startSEXP );
        NumericVector __result = gamma_mean(outgamma, start);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Xmat_decode
void Xmat_decode(RawMatrix Xmat);
RcppExport SEXP icensmis_Xmat_decode(SEXP XmatSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< RawMatrix >::type Xmat(XmatSEXP );
        Xmat_decode(Xmat);
    }
    return R_NilValue;
END_RCPP
}
// Xmat_norm
NumericMatrix Xmat_norm(RawMatrix Xmat);
RcppExport SEXP icensmis_Xmat_norm(SEXP XmatSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< RawMatrix >::type Xmat(XmatSEXP );
        NumericMatrix __result = Xmat_norm(Xmat);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// loglik_raw
double loglik_raw(NumericVector parm, NumericMatrix Dm, RawMatrix Xmat, NumericMatrix sdv);
RcppExport SEXP icensmis_loglik_raw(SEXP parmSEXP, SEXP DmSEXP, SEXP XmatSEXP, SEXP sdvSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type parm(parmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< RawMatrix >::type Xmat(XmatSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type sdv(sdvSEXP );
        double __result = loglik_raw(parm, Dm, Xmat, sdv);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// loglik_pw_raw
double loglik_pw_raw(NumericVector parm, IntegerVector breaks, NumericMatrix Dm, RawMatrix Xmat, NumericMatrix sdv);
RcppExport SEXP icensmis_loglik_pw_raw(SEXP parmSEXP, SEXP breaksSEXP, SEXP DmSEXP, SEXP XmatSEXP, SEXP sdvSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type parm(parmSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type breaks(breaksSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< RawMatrix >::type Xmat(XmatSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type sdv(sdvSEXP );
        double __result = loglik_pw_raw(parm, breaks, Dm, Xmat, sdv);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// maxlambda_raw
double maxlambda_raw(NumericMatrix Dm, RawMatrix Xmat, NumericMatrix sdv, NumericVector parm, Function fitsurv);
RcppExport SEXP icensmis_maxlambda_raw(SEXP DmSEXP, SEXP XmatSEXP, SEXP sdvSEXP, SEXP parmSEXP, SEXP fitsurvSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< RawMatrix >::type Xmat(XmatSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type sdv(sdvSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type parm(parmSEXP );
        Rcpp::traits::input_parameter< Function >::type fitsurv(fitsurvSEXP );
        double __result = maxlambda_raw(Dm, Xmat, sdv, parm, fitsurv);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// iclasso_raw
NumericVector iclasso_raw(NumericMatrix Dm, RawMatrix Xmat, NumericMatrix sdv, NumericVector parmi, double lambda, Function fitsurv, double tol);
RcppExport SEXP icensmis_iclasso_raw(SEXP DmSEXP, SEXP XmatSEXP, SEXP sdvSEXP, SEXP parmiSEXP, SEXP lambdaSEXP, SEXP fitsurvSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< RawMatrix >::type Xmat(XmatSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type sdv(sdvSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type parmi(parmiSEXP );
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< Function >::type fitsurv(fitsurvSEXP );
        Rcpp::traits::input_parameter< double >::type tol(tolSEXP );
        NumericVector __result = iclasso_raw(Dm, Xmat, sdv, parmi, lambda, fitsurv, tol);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// maxlambda_pw_raw
double maxlambda_pw_raw(NumericMatrix Dm, RawMatrix Xmat, NumericMatrix sdv, NumericVector parm, IntegerVector breaks, Function fitsurv_pw);
RcppExport SEXP icensmis_maxlambda_pw_raw(SEXP DmSEXP, SEXP XmatSEXP, SEXP sdvSEXP, SEXP parmSEXP, SEXP breaksSEXP, SEXP fitsurv_pwSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< RawMatrix >::type Xmat(XmatSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type sdv(sdvSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type parm(parmSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type breaks(breaksSEXP );
        Rcpp::traits::input_parameter< Function >::type fitsurv_pw(fitsurv_pwSEXP );
        double __result = maxlambda_pw_raw(Dm, Xmat, sdv, parm, breaks, fitsurv_pw);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// iclasso_pw_raw
NumericVector iclasso_pw_raw(NumericMatrix Dm, RawMatrix Xmat, NumericMatrix sdv, NumericVector parmi, IntegerVector breaks, double lambda, Function fitsurv_pw, double tol);
RcppExport SEXP icensmis_iclasso_pw_raw(SEXP DmSEXP, SEXP XmatSEXP, SEXP sdvSEXP, SEXP parmiSEXP, SEXP breaksSEXP, SEXP lambdaSEXP, SEXP fitsurv_pwSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< RawMatrix >::type Xmat(XmatSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type sdv(sdvSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type parmi(parmiSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type breaks(breaksSEXP );
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< Function >::type fitsurv_pw(fitsurv_pwSEXP );
        Rcpp::traits::input_parameter< double >::type tol(tolSEXP );
        NumericVector __result = iclasso_pw_raw(Dm, Xmat, sdv, parmi, breaks, lambda, fitsurv_pw, tol);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// bayesmc_raw
IntegerVector bayesmc_raw(NumericMatrix Dm, RawMatrix Xmat, double b, double om1, double om2, int niter, double psample, double initsurv, int nreport, Function fitsurv);
RcppExport SEXP icensmis_bayesmc_raw(SEXP DmSEXP, SEXP XmatSEXP, SEXP bSEXP, SEXP om1SEXP, SEXP om2SEXP, SEXP niterSEXP, SEXP psampleSEXP, SEXP initsurvSEXP, SEXP nreportSEXP, SEXP fitsurvSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< RawMatrix >::type Xmat(XmatSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        Rcpp::traits::input_parameter< double >::type om1(om1SEXP );
        Rcpp::traits::input_parameter< double >::type om2(om2SEXP );
        Rcpp::traits::input_parameter< int >::type niter(niterSEXP );
        Rcpp::traits::input_parameter< double >::type psample(psampleSEXP );
        Rcpp::traits::input_parameter< double >::type initsurv(initsurvSEXP );
        Rcpp::traits::input_parameter< int >::type nreport(nreportSEXP );
        Rcpp::traits::input_parameter< Function >::type fitsurv(fitsurvSEXP );
        IntegerVector __result = bayesmc_raw(Dm, Xmat, b, om1, om2, niter, psample, initsurv, nreport, fitsurv);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// bayesmc_pw_raw
IntegerVector bayesmc_pw_raw(NumericMatrix Dm, RawMatrix Xmat, IntegerVector breaks, double b, double om1, double om2, int niter, double psample, double initsurv, int nreport, Function fitsurv_pw);
RcppExport SEXP icensmis_bayesmc_pw_raw(SEXP DmSEXP, SEXP XmatSEXP, SEXP breaksSEXP, SEXP bSEXP, SEXP om1SEXP, SEXP om2SEXP, SEXP niterSEXP, SEXP psampleSEXP, SEXP initsurvSEXP, SEXP nreportSEXP, SEXP fitsurv_pwSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< RawMatrix >::type Xmat(XmatSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type breaks(breaksSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        Rcpp::traits::input_parameter< double >::type om1(om1SEXP );
        Rcpp::traits::input_parameter< double >::type om2(om2SEXP );
        Rcpp::traits::input_parameter< int >::type niter(niterSEXP );
        Rcpp::traits::input_parameter< double >::type psample(psampleSEXP );
        Rcpp::traits::input_parameter< double >::type initsurv(initsurvSEXP );
        Rcpp::traits::input_parameter< int >::type nreport(nreportSEXP );
        Rcpp::traits::input_parameter< Function >::type fitsurv_pw(fitsurv_pwSEXP );
        IntegerVector __result = bayesmc_pw_raw(Dm, Xmat, breaks, b, om1, om2, niter, psample, initsurv, nreport, fitsurv_pw);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// loglikA0
double loglikA0(NumericVector parm, NumericMatrix Dm);
RcppExport SEXP icensmis_loglikA0(SEXP parmSEXP, SEXP DmSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type parm(parmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        double __result = loglikA0(parm, Dm);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// gradlikA0
NumericVector gradlikA0(NumericVector parm, NumericMatrix Dm);
RcppExport SEXP icensmis_gradlikA0(SEXP parmSEXP, SEXP DmSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type parm(parmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        NumericVector __result = gradlikA0(parm, Dm);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// loglikA
double loglikA(NumericVector parm, NumericMatrix Dm, NumericMatrix Xmat);
RcppExport SEXP icensmis_loglikA(SEXP parmSEXP, SEXP DmSEXP, SEXP XmatSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type parm(parmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Xmat(XmatSEXP );
        double __result = loglikA(parm, Dm, Xmat);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// gradlikA
NumericVector gradlikA(NumericVector parm, NumericMatrix Dm, NumericMatrix Xmat);
RcppExport SEXP icensmis_gradlikA(SEXP parmSEXP, SEXP DmSEXP, SEXP XmatSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type parm(parmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Xmat(XmatSEXP );
        NumericVector __result = gradlikA(parm, Dm, Xmat);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// loglikTA
double loglikTA(NumericVector parm, NumericMatrix Dm, NumericMatrix TXmat);
RcppExport SEXP icensmis_loglikTA(SEXP parmSEXP, SEXP DmSEXP, SEXP TXmatSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type parm(parmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type TXmat(TXmatSEXP );
        double __result = loglikTA(parm, Dm, TXmat);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// gradlikTA
NumericVector gradlikTA(NumericVector parm, NumericMatrix Dm, NumericMatrix TXmat);
RcppExport SEXP icensmis_gradlikTA(SEXP parmSEXP, SEXP DmSEXP, SEXP TXmatSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type parm(parmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type TXmat(TXmatSEXP );
        NumericVector __result = gradlikTA(parm, Dm, TXmat);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// loglikB0
double loglikB0(NumericVector parm1, NumericMatrix Dm);
RcppExport SEXP icensmis_loglikB0(SEXP parm1SEXP, SEXP DmSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type parm1(parm1SEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        double __result = loglikB0(parm1, Dm);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// gradlikB0
NumericVector gradlikB0(NumericVector parm1, NumericMatrix Dm);
RcppExport SEXP icensmis_gradlikB0(SEXP parm1SEXP, SEXP DmSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type parm1(parm1SEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        NumericVector __result = gradlikB0(parm1, Dm);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// loglikB
double loglikB(NumericVector parm, NumericMatrix Dm, NumericMatrix Xmat);
RcppExport SEXP icensmis_loglikB(SEXP parmSEXP, SEXP DmSEXP, SEXP XmatSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type parm(parmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Xmat(XmatSEXP );
        double __result = loglikB(parm, Dm, Xmat);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// gradlikB
NumericVector gradlikB(NumericVector parm, NumericMatrix Dm, NumericMatrix Xmat);
RcppExport SEXP icensmis_gradlikB(SEXP parmSEXP, SEXP DmSEXP, SEXP XmatSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type parm(parmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Xmat(XmatSEXP );
        NumericVector __result = gradlikB(parm, Dm, Xmat);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// loglikTB
double loglikTB(NumericVector parm, NumericMatrix Dm, NumericMatrix TXmat);
RcppExport SEXP icensmis_loglikTB(SEXP parmSEXP, SEXP DmSEXP, SEXP TXmatSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type parm(parmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type TXmat(TXmatSEXP );
        double __result = loglikTB(parm, Dm, TXmat);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// gradlikTB
NumericVector gradlikTB(NumericVector parm, NumericMatrix Dm, NumericMatrix TXmat);
RcppExport SEXP icensmis_gradlikTB(SEXP parmSEXP, SEXP DmSEXP, SEXP TXmatSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type parm(parmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type TXmat(TXmatSEXP );
        NumericVector __result = gradlikTB(parm, Dm, TXmat);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// loglikC0
double loglikC0(NumericVector parm, NumericMatrix Dm);
RcppExport SEXP icensmis_loglikC0(SEXP parmSEXP, SEXP DmSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type parm(parmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        double __result = loglikC0(parm, Dm);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// gradlikC0
NumericVector gradlikC0(NumericVector parm, NumericMatrix Dm);
RcppExport SEXP icensmis_gradlikC0(SEXP parmSEXP, SEXP DmSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type parm(parmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        NumericVector __result = gradlikC0(parm, Dm);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// loglikC
double loglikC(NumericVector parm, NumericMatrix Dm, NumericMatrix Xmat);
RcppExport SEXP icensmis_loglikC(SEXP parmSEXP, SEXP DmSEXP, SEXP XmatSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type parm(parmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Xmat(XmatSEXP );
        double __result = loglikC(parm, Dm, Xmat);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// gradlikC
NumericVector gradlikC(NumericVector parm, NumericMatrix Dm, NumericMatrix Xmat);
RcppExport SEXP icensmis_gradlikC(SEXP parmSEXP, SEXP DmSEXP, SEXP XmatSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type parm(parmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Dm(DmSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Xmat(XmatSEXP );
        NumericVector __result = gradlikC(parm, Dm, Xmat);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// powerdmat1
NumericMatrix powerdmat1(double phi1, double phi0, int J, double negpred);
RcppExport SEXP icensmis_powerdmat1(SEXP phi1SEXP, SEXP phi0SEXP, SEXP JSEXP, SEXP negpredSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type phi1(phi1SEXP );
        Rcpp::traits::input_parameter< double >::type phi0(phi0SEXP );
        Rcpp::traits::input_parameter< int >::type J(JSEXP );
        Rcpp::traits::input_parameter< double >::type negpred(negpredSEXP );
        NumericMatrix __result = powerdmat1(phi1, phi0, J, negpred);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// powerdmat2
List powerdmat2(double phi1, double phi0, int J, double negpred, NumericVector pmiss);
RcppExport SEXP icensmis_powerdmat2(SEXP phi1SEXP, SEXP phi0SEXP, SEXP JSEXP, SEXP negpredSEXP, SEXP pmissSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type phi1(phi1SEXP );
        Rcpp::traits::input_parameter< double >::type phi0(phi0SEXP );
        Rcpp::traits::input_parameter< int >::type J(JSEXP );
        Rcpp::traits::input_parameter< double >::type negpred(negpredSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type pmiss(pmissSEXP );
        List __result = powerdmat2(phi1, phi0, J, negpred, pmiss);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// powerdmat3
NumericMatrix powerdmat3(double phi1, double phi0, int J, double negpred);
RcppExport SEXP icensmis_powerdmat3(SEXP phi1SEXP, SEXP phi0SEXP, SEXP JSEXP, SEXP negpredSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type phi1(phi1SEXP );
        Rcpp::traits::input_parameter< double >::type phi0(phi0SEXP );
        Rcpp::traits::input_parameter< int >::type J(JSEXP );
        Rcpp::traits::input_parameter< double >::type negpred(negpredSEXP );
        NumericMatrix __result = powerdmat3(phi1, phi0, J, negpred);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// powerdmat4
List powerdmat4(double phi1, double phi0, int J, double negpred, NumericVector pmiss);
RcppExport SEXP icensmis_powerdmat4(SEXP phi1SEXP, SEXP phi0SEXP, SEXP JSEXP, SEXP negpredSEXP, SEXP pmissSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type phi1(phi1SEXP );
        Rcpp::traits::input_parameter< double >::type phi0(phi0SEXP );
        Rcpp::traits::input_parameter< int >::type J(JSEXP );
        Rcpp::traits::input_parameter< double >::type negpred(negpredSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type pmiss(pmissSEXP );
        List __result = powerdmat4(phi1, phi0, J, negpred, pmiss);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
